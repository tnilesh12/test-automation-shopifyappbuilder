name: Build and Upload APK/AAB to DigitalOcean Spaces

on:
  # push:
  #   branches:
  #     - master
  # pull_request:
  workflow_dispatch:  # Trigger manually via GitHub Actions
    inputs:
      app_name:
        description: 'The name of the app'
        required: true
      new_package_name:
        description: 'The new package name'
        required: true
      current_package_name:
        description: 'The current package name'
        required: true
      google_services_url:
        description: 'URL for google-services.json'
        required: true
      ic_app_icon_url:
        description: 'URL for ic_app_icon.png'
        required: true
      app_config_url:
        description: 'URL for app_config.dart'
        required: true
      info_plist_url:
        description: 'URL for Info.plist'
        required: true
      google_info_plist_url:
        description: 'URL for GoogleService-Info.plist'
        required: true
      key_url:
        description: 'URL for key.jks'
        required: true
      icon_1024_url:
        description: 'URL for icon-1024x1024.jpg'
        required: true

jobs:
  build:
    name: Build and Upload to DigitalOcean Spaces
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Java (JDK 17 in this case)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      # Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        # with:
        #   flutter-version: 'stable'

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # # Get the latest Kotlin version
      # - name: Get latest Kotlin version
      #   id: kotlin_version
      #   run: |
      #     LATEST_KOTLIN_VERSION=$(curl -s https://api.github.com/repos/JetBrains/kotlin/releases/latest | jq -r .tag_name)
      #     echo "Latest Kotlin Version: $LATEST_KOTLIN_VERSION"
      #     echo "LATEST_KOTLIN_VERSION=$LATEST_KOTLIN_VERSION" >> $GITHUB_ENV

      # # Update Kotlin version in build.gradle
      # - name: Update Kotlin Version in build.gradle
      #   run: |
      #     sed -i "s/ext.kotlin_version = '.*'/ext.kotlin_version = '${LATEST_KOTLIN_VERSION}'/" android/build.gradle

      # # Update Kotlin version in settings.gradle
      # - name: Update Kotlin Plugin Version in settings.gradle
      #   run: |
      #     sed -i "s/id 'org.jetbrains.kotlin.android' version '.*'/id 'org.jetbrains.kotlin.android' version '${LATEST_KOTLIN_VERSION}'/" android/settings.gradle  

      # Create directory structure for the client files
      - name: Create client directory
        run: |
          CLIENT_DIR="client_info/${{ github.event.inputs.new_package_name }}"
          mkdir -p "$CLIENT_DIR"

      # Download google-services.json
      - name: Download google-services.json
        run: |
          wget -O "client_info/${{ github.event.inputs.new_package_name }}/google-services.json" "${{ github.event.inputs.google_services_url }}"

      # Download ic_app_icon.png
      - name: Download ic_app_icon.png
        run: |
          wget -O "client_info/${{ github.event.inputs.new_package_name }}/ic_app_icon.png" "${{ github.event.inputs.ic_app_icon_url }}"

      # Download app_config.dart
      - name: Download app_config.dart
        run: |
          wget -O "client_info/${{ github.event.inputs.new_package_name }}/app_config.dart" "${{ github.event.inputs.app_config_url }}"

      # Download Info.plist
      - name: Download Info.plist
        run: |
          wget -O "client_info/${{ github.event.inputs.new_package_name }}/Info.plist" "${{ github.event.inputs.info_plist_url }}"

      # Download GoogleService-Info.plist
      - name: Download GoogleService-Info.plist
        run: |
          wget -O "client_info/${{ github.event.inputs.new_package_name }}/GoogleService-Info.plist" "${{ github.event.inputs.google_info_plist_url }}"

      # Download key.jks
      - name: Download key.jks
        run: |
          wget -O "client_info/${{ github.event.inputs.new_package_name }}/key" "${{ github.event.inputs.key_url }}"
# wget -O "client_info/${{ github.event.inputs.new_package_name }}/key.jks" "${{ github.event.inputs.key_url }}"

      # Download icon-1024x1024.jpg
      - name: Download icon-1024x1024.jpg
        run: |
          wget -O "client_info/${{ github.event.inputs.new_package_name }}/icon-1024x1024.jpg" "${{ github.event.inputs.icon_1024_url }}"

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Run the client configuration script (your shell script)
      - name: Run client configuration script
        run: |
          chmod +x client_config.sh  # Make the script executable
          ./client_config.sh "${{ github.event.inputs.app_name }}" "${{ github.event.inputs.new_package_name }}" "${{ github.event.inputs.current_package_name }}"

      # Decode and setup keystore (from GitHub Secrets)
      - name: Decode and setup keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > android/app/key.jks

      # Build APK
      - name: Build APK
        run: flutter build apk --release --no-tree-shake-icons

      # Build AAB (Android App Bundle)
      - name: Build AAB
        run: flutter build appbundle --release --no-tree-shake-icons

      # # Sign the APK
      # - name: Sign APK
      #   env:
      #     KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      #     KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      #     KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      #   run: |
      #     jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
      #       -keystore android/app/key.jks \
      #       -storepass $KEYSTORE_PASSWORD \
      #       -keypass $KEY_PASSWORD \
      #       android/app/build/outputs/apk/release/app-release-unsigned.apk $KEY_ALIAS

      # # Zip align APK
      # - name: Zip align APK
      #   run: |
      #     ${ANDROID_HOME}/build-tools/30.0.3/zipalign -v 4 \
      #       android/app/build/outputs/apk/release/app-release-unsigned.apk \
      #       android/app/build/outputs/apk/release/app-release.apk

      # Debugging step: Check if the APK and AAB files exist
      - name: Check APK and AAB existence
        run: |
          if [ ! -f "build/app/outputs/apk/release/app-release.apk" ]; then
            echo "APK file not found!"; exit 1;
          fi
          if [ ! -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "AAB file not found!"; exit 1;
          fi

      # #     ls -R build/app/outputs || echo "No build outputs found"

      # # # Check if AAB file exists
      # # - name: Check if AAB file exists
      # #   run: |
      # #     if [ ! -f "build/app/outputs/bundle/release/app-release.aab" ]; then
      # #       echo "AAB file not found!"
      # #       exit 1
      # #     fi

      # # # Upload APK and AAB as artifacts
      # # - name: Upload APK and AAB
      # #   uses: actions/upload-artifact@v3
      # #   with:
      # #     name: app-release
      # #     path: build/app/outputs/**/*
      # #     # path: |
      # #     #   android/app/build/outputs/apk/release/app-release.apk
      # #     #   android/app/build/outputs/bundle/release/app-release.aab

      # # Configure AWS CLI for DigitalOcean Spaces

      # - name: Configure AWS CLI for DigitalOcean Spaces
      #   run: |
      #     aws configure set aws_access_key_id ${{ secrets.DO_SPACES_ACCESS_KEY }}
      #     aws configure set aws_secret_access_key ${{ secrets.DO_SPACES_SECRET_KEY }}
      #     aws configure set default.region ${{ secrets.DO_SPACES_REGION }}
      #     aws configure set default.s3.endpoint-url https://${{ secrets.DO_SPACES_ENDPOINT }}

      # # Upload APK and AAB to DigitalOcean Spaces
      # - name: Upload APK and AAB to DigitalOcean Spaces
      #   run: |
      #     aws s3 cp build/app/outputs/apk/release/app-release.apk s3://mobilify/builds/app-release.apk
      #     aws s3 cp build/app/outputs/bundle/release/app-release.aab s3://mobilify/builds/app-release.aab

      # Install spaces-cli for uploading files to DigitalOcean Spaces
      - name: Install spaces-cli
        run: npm install -g spaces-cli

      # Generate dynamic folder name with client name and timestamp
      - name: Create client folder with timestamp
        id: vars
        run: |
          CLIENT_PACKAGE_NAME="${{ github.event.inputs.new_package_name }}"  # Client name from input
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          echo "folder_name=${CLIENT_PACKAGE_NAME}" >> $GITHUB_ENV
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_ENV

      # Upload APK and AAB to DigitalOcean Spaces using spaces-cli
      - name: Upload APK and AAB to DigitalOcean Spaces using spaces-cli
        env:
          ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          SPACE: ${{ secrets.S3_SPACE }}
          REGION: ${{ secrets.S3_REGION }}
          FOLDER_NAME: ${{ env.folder_name }}
          TIMESTAMP: ${{ env.timestamp }}
        run: |
          echo "Uploading APK..."
          spaces-cli up "build/app/outputs/apk/release/app-release.apk" \
                      -t "/builds/${{ env.folder_name }}/app-release-${{ env.TIMESTAMP }}.apk" \
                      -s $SPACE \
                      -r $REGION || { echo "Failed to upload APK!"; exit 1; }
          echo "Uploading AAB..."
          spaces-cli up "build/app/outputs/bundle/release/app-release.aab" \
                      -t "/builds/${{ env.folder_name }}/app-release-${{ env.TIMESTAMP }}.aab" \
                      -s $SPACE \
                      -r $REGION || { echo "Failed to upload AAB!"; exit 1; }


# name: "Build iOS app"

# on:
#   # manual trigger but change to any supported event
#   # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow
#   workflow_dispatch:
#     branches: #[main]
#       - staging  # Trigger build on push to the staging branch

# jobs:
#   build_with_signing:
#     runs-on: macos-latest  # Use the macOS environment

#     steps:
#       # this was more debug as was curious what came pre-installed
#       # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
#       - name: check Xcode version
#         run: /usr/bin/xcodebuild -version

#       - name: Checkout repository
#         uses: actions/checkout@v3
#         #with:
#         #  flutter-version: '4.0.0'
#         #  architecture: x64  # Specify the Flutter channel (stable, beta, master)

#       - name: Flutter doctor
#         run: flutter doctor
        
#       - name: Flutter clean
#         run: flutter clean

#       - name: Flutter dependencies Upgrade
#         run: flutter pub upgrade --major-versions

#       - name: Install Flutter dependencies
#         run: flutter pub get

#       - name: Install the Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE }}
#           P12_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
#           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE }}
#           KEYCHAIN_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }} #KEYCHAIN_PASSWORD
#         run: |
#           # create variables
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

#           # import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#           echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

#           # create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

#           # import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH

#           # apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

#       - name: Archive the app #build archive
#         run: |
#           xcodebuild -scheme "I am Groot" \
#           -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
#           -sdk iphoneos \
#           -configuration Debug \
#           -destination generic/platform=iOS \
#           clean archive          

#       - name: Export ipa
#         # env:
#         #   EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
#         # run: |
#         #   EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
#         #   echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
#         #   xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build
#         run: |
#           xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist ios/ExportOptions.plist -exportPath $RUNNER_TEMP/build

#       - name: Upload application
#         uses: actions/upload-artifact@v3
#         with:
#           name: app
#           path: ${{ runner.temp }}/build/I\ am\ Groot.ipa
#           # you can also archive the entire directory 
#           # path: ${{ runner.temp }}/build
#           retention-days: 3
